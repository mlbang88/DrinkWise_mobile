/**
 * Fonctions Cloud Firebase pour DrinkWise
 */

const {setGlobalOptions} = require("firebase-functions");
const {onCall} = require("firebase-functions/v2/https");
const {onRequest} = require("firebase-functions/https");
const {onDocumentCreated, onDocumentUpdated} = require("firebase-functions/v2/firestore");
const logger = require("firebase-functions/logger");
const cors = require('cors');
const admin = require('firebase-admin');

// Initialiser Admin SDK
if (!admin.apps.length) {
  admin.initializeApp();
}

const db = admin.firestore();

// Configuration CORS pour permettre les requ√™tes depuis localhost et production
const corsOptions = {
  origin: [
    'http://localhost:5173',
    'http://localhost:5174',
    'http://localhost:5175',
    'http://localhost:5176',
    'http://localhost:5177',
    'http://localhost:5178',
    'http://localhost:5179',
    'http://localhost:5180',
    'https://drinkwise-31d3a.web.app',
    'https://drinkwise-31d3a.firebaseapp.com'
  ],
  credentials: true,
  optionsSuccessStatus: 200
};

const corsHandler = cors(corsOptions);

// Fonction pour g√©n√©rer un r√©sum√© de soir√©e avec IA
exports.generateSummary = onCall({
  region: 'us-central1',
  cors: corsOptions
}, async (request) => {
  try {
    const { partyData, drunkLevel, appId } = request.data;
    
    // V√©rifier l'authentification
    if (!request.auth) {
      throw new Error('Utilisateur non authentifi√©');
    }

    logger.info('G√©n√©ration de r√©sum√© pour:', { 
      userId: request.auth.uid, 
      drunkLevel,
      drinksCount: partyData?.drinks?.length || 0 
    });

    // Analyser les donn√©es de la soir√©e
    const totalDrinks = partyData?.drinks?.length || 0;
    const drinkTypes = {};
    const events = partyData?.events || [];
    
    // Compter les types de boissons
    partyData?.drinks?.forEach(drink => {
      const type = drink.type || 'Inconnu';
      drinkTypes[type] = (drinkTypes[type] || 0) + 1;
    });

    // Cr√©er un r√©sum√© bas√© sur les donn√©es
    let summary = `üéâ R√©sum√© de votre soir√©e !\n\n`;
    
    summary += `üç∏ Consommation: ${totalDrinks} boisson${totalDrinks > 1 ? 's' : ''}\n`;
    
    if (Object.keys(drinkTypes).length > 0) {
      summary += `üìä R√©partition:\n`;
      Object.entries(drinkTypes).forEach(([type, count]) => {
        summary += `  ‚Ä¢ ${type}: ${count}\n`;
      });
    }
    
    if (events.length > 0) {
      summary += `\nüéä √âv√©nements: ${events.length} moment${events.length > 1 ? 's' : ''} marquant${events.length > 1 ? 's' : ''}\n`;
    }
    
    summary += `\nüéØ Niveau de soir√©e: ${drunkLevel}\n`;
    
    // Ajouter un conseil bas√© sur le niveau
    switch(drunkLevel) {
      case 'Soir√©e Sage':
        summary += `\nüí° Belle soir√©e contr√¥l√©e ! Continuez comme √ßa ! üåü`;
        break;
      case 'Soir√©e Correcte':
        summary += `\nüí° Soir√©e √©quilibr√©e, vous savez vous amuser tout en restant raisonnable ! üëç`;
        break;
      case 'Soir√©e Arros√©e':
        summary += `\nüí° Soir√©e festive ! N'oubliez pas de boire de l'eau et de bien vous reposer. üíß`;
        break;
      case 'Soir√©e Excessive':
        summary += `\nüí° Soir√©e intense ! Prenez soin de vous et hydratez-vous bien. üö∞`;
        break;
      default:
        summary += `\nüí° Merci d'avoir utilis√© DrinkWise pour suivre votre soir√©e ! üéâ`;
    }

    logger.info('R√©sum√© g√©n√©r√© avec succ√®s');

    return {
      success: true,
      summary: summary,
      timestamp: new Date().toISOString()
    };

  } catch (error) {
    logger.error('Erreur lors de la g√©n√©ration du r√©sum√©:', error);
    
    return {
      success: false,
      error: error.message,
      summary: "üéâ Votre soir√©e a √©t√© enregistr√©e ! Merci d'avoir utilis√© DrinkWise."
    };
  }
});

// Fonction automatique de synchronisation des amiti√©s (version simplifi√©e)
exports.syncFriendshipRequest = onCall({
  region: 'us-central1',
  cors: corsOptions
}, async (request) => {
  try {
    // V√©rifier l'authentification
    if (!request.auth) {
      throw new Error('Utilisateur non authentifi√©');
    }

    const { requestId, appId } = request.data;
    
    if (!requestId || !appId) {
      throw new Error('Param√®tres manquants: requestId et appId requis');
    }

    logger.info('Synchronisation manuelle d\'amiti√©:', {
      requestId,
      userId: request.auth.uid
    });

    // R√©cup√©rer la demande d'ami
    const requestRef = db.doc(`artifacts/${appId}/friend_requests/${requestId}`);
    const requestDoc = await requestRef.get();
    
    if (!requestDoc.exists) {
      throw new Error('Demande d\'ami introuvable');
    }

    const requestData = requestDoc.data();

    // V√©rifier que la demande est accept√©e
    if (requestData.status !== 'accepted') {
      throw new Error('La demande n\'est pas accept√©e');
    }

    const batch = db.batch();

    // R√©f√©rences des documents √† mettre √† jour
    const fromProfileRef = db.doc(`artifacts/${appId}/users/${requestData.from}/profile/data`);
    const fromStatsRef = db.doc(`artifacts/${appId}/public_user_stats/${requestData.from}`);
    const toProfileRef = db.doc(`artifacts/${appId}/users/${requestData.to}/profile/data`);
    const toStatsRef = db.doc(`artifacts/${appId}/public_user_stats/${requestData.to}`);

    // Ajouter l'ami dans les deux sens
    batch.update(fromProfileRef, {
      friends: admin.firestore.FieldValue.arrayUnion(requestData.to)
    });
    
    batch.update(fromStatsRef, {
      friends: admin.firestore.FieldValue.arrayUnion(requestData.to)
    });

    batch.update(toProfileRef, {
      friends: admin.firestore.FieldValue.arrayUnion(requestData.from)
    });
    
    batch.update(toStatsRef, {
      friends: admin.firestore.FieldValue.arrayUnion(requestData.from)
    });

    // Supprimer la demande d'ami apr√®s synchronisation
    batch.delete(requestRef);

    // Ex√©cuter toutes les op√©rations en une seule transaction
    await batch.commit();

    logger.info('‚úÖ Synchronisation d\'amiti√© r√©ussie:', {
      from: requestData.fromUsername,
      to: requestData.toUsername
    });

    return { 
      success: true, 
      message: `Amiti√© synchronis√©e entre ${requestData.fromUsername} et ${requestData.toUsername}` 
    };

  } catch (error) {
    logger.error('‚ùå Erreur synchronisation manuelle:', error);
    return { success: false, error: error.message };
  }
});

// Fonction pour supprimer une amiti√© de mani√®re bidirectionnelle
exports.removeFriendship = onCall({
  region: 'us-central1',
  cors: corsOptions
}, async (request) => {
  try {
    // V√©rifier l'authentification
    if (!request.auth) {
      throw new Error('Utilisateur non authentifi√©');
    }

    const { friendId, appId } = request.data;
    const userId = request.auth.uid;
    
    if (!friendId || !appId) {
      throw new Error('Param√®tres manquants: friendId et appId requis');
    }

    logger.info('Suppression bidirectionnelle d\'amiti√©:', {
      userId,
      friendId
    });

    const batch = db.batch();

    // R√©f√©rences des documents √† mettre √† jour
    const userProfileRef = db.doc(`artifacts/${appId}/users/${userId}/profile/data`);
    const userStatsRef = db.doc(`artifacts/${appId}/public_user_stats/${userId}`);
    const friendProfileRef = db.doc(`artifacts/${appId}/users/${friendId}/profile/data`);
    const friendStatsRef = db.doc(`artifacts/${appId}/public_user_stats/${friendId}`);

    // Supprimer l'ami des deux c√¥t√©s (profil priv√© et stats publiques)
    batch.update(userProfileRef, {
      friends: admin.firestore.FieldValue.arrayRemove(friendId)
    });
    
    batch.update(userStatsRef, {
      friends: admin.firestore.FieldValue.arrayRemove(friendId)
    });

    batch.update(friendProfileRef, {
      friends: admin.firestore.FieldValue.arrayRemove(userId)
    });
    
    batch.update(friendStatsRef, {
      friends: admin.firestore.FieldValue.arrayRemove(userId)
    });

    // Ex√©cuter toutes les op√©rations en une seule transaction
    await batch.commit();

    logger.info('‚úÖ Suppression bidirectionnelle d\'amiti√© r√©ussie');

    return { 
      success: true, 
      message: 'Amiti√© supprim√©e des deux c√¥t√©s (profil et stats publiques)' 
    };

  } catch (error) {
    logger.error('‚ùå Erreur suppression bidirectionnelle:', error);
    return { success: false, error: error.message };
  }
});

// Fonction de r√©paration pour forcer l'amiti√© bidirectionnelle
exports.fixFriendship = onCall({
  region: 'us-central1',
  cors: corsOptions
}, async (request) => {
  try {
    // V√©rifier l'authentification
    if (!request.auth) {
      throw new Error('Utilisateur non authentifi√©');
    }

    const { friendId, appId } = request.data;
    const userId = request.auth.uid;
    
    if (!friendId || !appId) {
      throw new Error('Param√®tres manquants: friendId et appId requis');
    }

    logger.info('üîß R√©paration amiti√© bidirectionnelle:', {
      userId,
      friendId
    });

    const batch = db.batch();

    // R√©f√©rences des documents √† mettre √† jour
    const userProfileRef = db.doc(`artifacts/${appId}/users/${userId}/profile/data`);
    const userStatsRef = db.doc(`artifacts/${appId}/public_user_stats/${userId}`);
    const friendProfileRef = db.doc(`artifacts/${appId}/users/${friendId}/profile/data`);
    const friendStatsRef = db.doc(`artifacts/${appId}/public_user_stats/${friendId}`);

    // Forcer l'ajout bidirectionnel (arrayUnion √©vite les doublons)
    batch.update(userProfileRef, {
      friends: admin.firestore.FieldValue.arrayUnion(friendId)
    });
    
    batch.update(userStatsRef, {
      friends: admin.firestore.FieldValue.arrayUnion(friendId)
    });

    batch.update(friendProfileRef, {
      friends: admin.firestore.FieldValue.arrayUnion(userId)
    });
    
    batch.update(friendStatsRef, {
      friends: admin.firestore.FieldValue.arrayUnion(userId)
    });

    // Ex√©cuter toutes les op√©rations
    await batch.commit();

    logger.info('‚úÖ Amiti√© bidirectionnelle r√©par√©e');

    return { 
      success: true, 
      message: 'Amiti√© bidirectionnelle r√©par√©e avec succ√®s' 
    };

  } catch (error) {
    logger.error('‚ùå Erreur r√©paration amiti√©:', error);
    return { success: false, error: error.message };
  }
});

// Fonction pour g√©rer les interactions du feed (likes, f√©licitations, commentaires)
exports.handleFeedInteraction = onCall({
  region: 'us-central1',
  cors: corsOptions
}, async (request) => {
  try {
    // V√©rifier l'authentification
    if (!request.auth) {
      throw new Error('Utilisateur non authentifi√©');
    }

    const { 
      itemId, 
      itemType, // 'party' ou 'badge'
      ownerId, 
      interactionType, // 'like', 'congratulate', 'comment'
      content, // Pour les commentaires
      appId 
    } = request.data;
    
    const userId = request.auth.uid;
    
    if (!itemId || !itemType || !ownerId || !interactionType || !appId) {
      throw new Error('Param√®tres manquants');
    }

    logger.info('Interaction feed:', {
      userId,
      itemId,
      itemType,
      ownerId,
      interactionType,
      authenticatedUser: request.auth.uid,
      content: content
    });

    // R√©f√©rence vers la collection des interactions
    const interactionsRef = db.collection(`artifacts/${appId}/feed_interactions`);
    const timestamp = admin.firestore.FieldValue.serverTimestamp();

    if (interactionType === 'comment') {
      // Ajouter un commentaire
      if (!content || content.trim() === '') {
        throw new Error('Le contenu du commentaire ne peut pas √™tre vide');
      }

      await interactionsRef.add({
        itemId,
        itemType,
        ownerId,
        userId,
        type: 'comment',
        content: content.trim(),
        timestamp,
        createdAt: new Date()
      });

      return { 
        success: true, 
        message: 'Commentaire ajout√© avec succ√®s' 
      };

    } else if (interactionType === 'like' || interactionType === 'congratulate') {
      // V√©rifier si l'interaction existe d√©j√†
      const existingQuery = await interactionsRef
        .where('itemId', '==', itemId)
        .where('userId', '==', userId)
        .where('type', '==', interactionType)
        .get();

      if (!existingQuery.empty) {
        // Supprimer l'interaction existante (toggle)
        const batch = db.batch();
        existingQuery.docs.forEach(doc => {
          batch.delete(doc.ref);
        });
        await batch.commit();

        return { 
          success: true, 
          message: `${interactionType === 'like' ? 'Like' : 'F√©licitation'} retir√©(e)`,
          action: 'removed'
        };
      } else {
        // Ajouter la nouvelle interaction
        await interactionsRef.add({
          itemId,
          itemType,
          ownerId,
          userId,
          type: interactionType,
          timestamp,
          createdAt: new Date()
        });

        return { 
          success: true, 
          message: `${interactionType === 'like' ? 'Like' : 'F√©licitation'} ajout√©(e)`,
          action: 'added'
        };
      }
    }

    throw new Error('Type d\'interaction non support√©');

  } catch (error) {
    logger.error('‚ùå Erreur interaction feed:', error);
    return { success: false, error: error.message };
  }
});

// Fonction pour r√©cup√©rer les interactions d'un √©l√©ment du feed
exports.getFeedInteractions = onCall({
  region: 'us-central1',
  cors: corsOptions
}, async (request) => {
  try {
    // V√©rifier l'authentification
    if (!request.auth) {
      throw new Error('Utilisateur non authentifi√©');
    }

    const { itemId, appId } = request.data;
    const currentUserId = request.auth.uid;
    
    if (!itemId || !appId) {
      throw new Error('Param√®tres manquants: itemId et appId requis');
    }

    logger.info('R√©cup√©ration interactions pour:', {
      itemId,
      userId: currentUserId
    });

    // R√©cup√©rer la liste des amis de l'utilisateur connect√©
    const userStatsRef = db.doc(`artifacts/${appId}/public_user_stats/${currentUserId}`);
    const userStatsDoc = await userStatsRef.get();
    
    let userFriends = [];
    if (userStatsDoc.exists) {
      userFriends = userStatsDoc.data().friends || [];
    }

    logger.info('Amis de l\'utilisateur:', userFriends);

    const interactionsRef = db.collection(`artifacts/${appId}/feed_interactions`);
    const snapshot = await interactionsRef
      .where('itemId', '==', itemId)
      .orderBy('timestamp', 'desc')
      .get();

    const interactions = {
      likes: [],
      congratulations: [],
      comments: []
    };

    // Utiliser for...of au lieu de forEach pour permettre await
    for (const doc of snapshot.docs) {
      const data = doc.data();
      const interactionUserId = data.userId;
      
      logger.info(`üîç √âvaluation interaction:`, {
        docId: doc.id,
        interactionUserId,
        currentUserId,
        userFriends,
        isCurrentUser: interactionUserId === currentUserId,
        isFriend: userFriends.includes(interactionUserId),
        interactionType: data.type,
        content: data.content
      });
      
      // V√©rifier si l'utilisateur peut voir cette interaction
      // L'utilisateur peut voir :
      // 1. Ses propres interactions
      // 2. Les interactions de ses amis (v√©rification bidirectionnelle)
      let canSeeInteraction = interactionUserId === currentUserId;
      
      if (!canSeeInteraction && userFriends.includes(interactionUserId)) {
        // V√©rifier la bidirectionnalit√© : est-ce que je suis aussi dans la liste d'amis de l'auteur de l'interaction ?
        try {
          const interactionUserStatsRef = db.collection(`artifacts/${appId}/public_user_stats`).doc(interactionUserId);
          const interactionUserStatsDoc = await interactionUserStatsRef.get();
          
          if (interactionUserStatsDoc.exists) {
            const interactionUserData = interactionUserStatsDoc.data();
            const interactionUserFriends = interactionUserData.friends || [];
            
            // V√©rification bidirectionnelle : je suis dans ses amis ET il est dans les miens
            canSeeInteraction = interactionUserFriends.includes(currentUserId);
            
            logger.info(`üîç V√©rification bidirectionnelle pour ${interactionUserId}:`, {
              interactionUserFriends,
              amISInHisFriends: interactionUserFriends.includes(currentUserId),
              isHeInMyFriends: userFriends.includes(interactionUserId),
              finalDecision: canSeeInteraction
            });
          } else {
            logger.info(`‚ö†Ô∏è Stats publiques introuvables pour ${interactionUserId}`);
            canSeeInteraction = false;
          }
        } catch (error) {
          logger.error(`‚ùå Erreur v√©rification bidirectionnelle pour ${interactionUserId}:`, error);
          canSeeInteraction = false;
        }
      }

      if (!canSeeInteraction) {
        logger.info(`‚ùå Interaction filtr√©e - amiti√© non bidirectionnelle entre ${interactionUserId} et ${currentUserId}`);
        continue; // Skip cette interaction
      }
      
      logger.info(`‚úÖ Interaction accept√©e pour ${interactionUserId}`);

      switch(data.type) {
        case 'like':
          interactions.likes.push({
            id: doc.id,
            userId: data.userId,
            timestamp: data.timestamp
          });
          break;
        case 'congratulate':
          interactions.congratulations.push({
            id: doc.id,
            userId: data.userId,
            timestamp: data.timestamp
          });
          break;
        case 'comment':
          interactions.comments.push({
            id: doc.id,
            userId: data.userId,
            content: data.content,
            timestamp: data.timestamp
          });
          break;
      }
    }

    logger.info('Interactions filtr√©es retourn√©es:', {
      likes: interactions.likes.length,
      congratulations: interactions.congratulations.length,
      comments: interactions.comments.length
    });

    return { 
      success: true, 
      interactions 
    };

  } catch (error) {
    logger.error('‚ùå Erreur r√©cup√©ration interactions:', error);
    return { success: false, error: error.message };
  }
});

// Fonction de test pour v√©rifier le fonctionnement
exports.helloWorld = onRequest((request, response) => {
  corsHandler(request, response, () => {
    logger.info("Hello logs!", {structuredData: true});
    response.send("Hello from Firebase!");
  });
});
// functions should each use functions.runWith({ maxInstances: 10 }) instead.
// In the v1 API, each function can only serve one request per container, so
// this will be the maximum concurrent request count.
// Configuration globale
setGlobalOptions({ maxInstances: 10 });
