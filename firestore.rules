rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Règles pour les soirées - accessibles au propriétaire et à ses amis
    match /artifacts/{appId}/users/{userId}/parties/{partyId} {
      allow read: if request.auth != null && (
        request.auth.uid == userId ||
        request.auth.uid in get(/databases/$(database)/documents/artifacts/$(appId)/public_user_stats/$(userId)).data.friends
      );
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Règles pour les badges - accessibles au propriétaire et à ses amis
    match /artifacts/{appId}/users/{userId}/badges/{badgeId} {
      allow read: if request.auth != null && (
        request.auth.uid == userId ||
        request.auth.uid in get(/databases/$(database)/documents/artifacts/$(appId)/public_user_stats/$(userId)).data.friends
      );
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Règles pour les profils - accessibles au propriétaire et à ses amis (pour les badges débloqués)
    match /artifacts/{appId}/users/{userId}/profile/{profileDoc} {
      allow read: if request.auth != null && (
        request.auth.uid == userId ||
        request.auth.uid in get(/databases/$(database)/documents/artifacts/$(appId)/public_user_stats/$(userId)).data.friends
      );
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Règles pour les autres données utilisateur (données strictement privées)
    match /artifacts/{appId}/users/{userId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Règles pour les statistiques publiques (lisibles par tous les utilisateurs authentifiés)
    match /artifacts/{appId}/public_user_stats/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Règles pour les demandes d'amis
    match /artifacts/{appId}/friend_requests/{requestId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.from ||
        request.auth.uid == resource.data.to
      );
      allow create: if request.auth != null && request.auth.uid == request.resource.data.from;
      allow update: if request.auth != null && request.auth.uid == resource.data.to;
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.from ||
        request.auth.uid == resource.data.to
      );
    }
    
    // Règles pour les groupes
    match /artifacts/{appId}/groups/{groupId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (request.auth.uid in resource.data.members || request.auth.uid in resource.data.admins);
      allow delete: if request.auth != null && request.auth.uid in resource.data.admins;
    }
    
    // Règles pour les données globales publiques
    match /artifacts/{appId}/global/{document=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Règles pour les souvenirs publics des groupes
    match /artifacts/{appId}/group_memories/{memoryId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Règles pour les interactions du feed (likes, commentaires, félicitations)
    match /artifacts/{appId}/feed_interactions/{interactionId} {
      // Lecture : autorisée pour tous les utilisateurs authentifiés
      // (nécessaire pour voir les interactions des amis)
      allow read: if request.auth != null;
      
      // Création : seulement par l'utilisateur qui fait l'interaction
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      
      // Modification/suppression : seulement par l'auteur de l'interaction
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Refuser tout autre accès
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
